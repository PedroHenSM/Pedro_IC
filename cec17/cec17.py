# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_cec17')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_cec17')
    _cec17 = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cec17', [dirname(__file__)])
        except ImportError:
            import _cec17
            return _cec17
        try:
            _mod = imp.load_module('_cec17', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _cec17 = swig_import_helper()
    del swig_import_helper
else:
    import _cec17
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def new_doubleArray(nelements):
    return _cec17.new_doubleArray(nelements)
new_doubleArray = _cec17.new_doubleArray

def delete_doubleArray(ary):
    return _cec17.delete_doubleArray(ary)
delete_doubleArray = _cec17.delete_doubleArray

def doubleArray_getitem(ary, index):
    return _cec17.doubleArray_getitem(ary, index)
doubleArray_getitem = _cec17.doubleArray_getitem

def doubleArray_setitem(ary, index, value):
    return _cec17.doubleArray_setitem(ary, index, value)
doubleArray_setitem = _cec17.doubleArray_setitem

def new_doubleddArray(rows):
    return _cec17.new_doubleddArray(rows)
new_doubleddArray = _cec17.new_doubleddArray

def castToDouble(b):
    return _cec17.castToDouble(b)
castToDouble = _cec17.castToDouble

def delete_doubleddArray(arr, rows, cols):
    return _cec17.delete_doubleddArray(arr, rows, cols)
delete_doubleddArray = _cec17.delete_doubleddArray

def doubleddArray_setitem(array, row, col, value):
    return _cec17.doubleddArray_setitem(array, row, col, value)
doubleddArray_setitem = _cec17.doubleddArray_setitem

def doubleddArray_getitem(array, row, col):
    return _cec17.doubleddArray_getitem(array, row, col)
doubleddArray_getitem = _cec17.doubleddArray_getitem

def cec17_test_COP(x, f, g, h, nx, mx, func_num):
    return _cec17.cec17_test_COP(x, f, g, h, nx, mx, func_num)
cec17_test_COP = _cec17.cec17_test_COP

def COP_01(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _cec17.COP_01(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
COP_01 = _cec17.COP_01

def COP_02(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _cec17.COP_02(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
COP_02 = _cec17.COP_02

def COP_03(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _cec17.COP_03(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
COP_03 = _cec17.COP_03

def COP_04(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _cec17.COP_04(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
COP_04 = _cec17.COP_04

def COP_05(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _cec17.COP_05(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
COP_05 = _cec17.COP_05

def COP_06(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _cec17.COP_06(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
COP_06 = _cec17.COP_06

def COP_07(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _cec17.COP_07(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
COP_07 = _cec17.COP_07

def COP_08(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _cec17.COP_08(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
COP_08 = _cec17.COP_08

def COP_09(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _cec17.COP_09(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
COP_09 = _cec17.COP_09

def COP_10(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _cec17.COP_10(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
COP_10 = _cec17.COP_10

def COP_11(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _cec17.COP_11(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
COP_11 = _cec17.COP_11

def COP_12(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _cec17.COP_12(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
COP_12 = _cec17.COP_12

def COP_13(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _cec17.COP_13(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
COP_13 = _cec17.COP_13

def COP_14(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _cec17.COP_14(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
COP_14 = _cec17.COP_14

def COP_15(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _cec17.COP_15(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
COP_15 = _cec17.COP_15

def COP_16(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _cec17.COP_16(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
COP_16 = _cec17.COP_16

def COP_17(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _cec17.COP_17(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
COP_17 = _cec17.COP_17

def COP_18(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _cec17.COP_18(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
COP_18 = _cec17.COP_18

def COP_19(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _cec17.COP_19(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
COP_19 = _cec17.COP_19

def COP_20(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _cec17.COP_20(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
COP_20 = _cec17.COP_20

def loadShiftData(fun_num, dim, pV):
    return _cec17.loadShiftData(fun_num, dim, pV)
loadShiftData = _cec17.loadShiftData

def loadRotateData(func_num, dim, pM):
    return _cec17.loadRotateData(func_num, dim, pM)
loadRotateData = _cec17.loadRotateData

def shiftfunc(arg1, arg2, arg3, arg4):
    return _cec17.shiftfunc(arg1, arg2, arg3, arg4)
shiftfunc = _cec17.shiftfunc

def rotatefunc(arg1, arg2, arg3, arg4):
    return _cec17.rotatefunc(arg1, arg2, arg3, arg4)
rotatefunc = _cec17.rotatefunc

def sr_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _cec17.sr_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
sr_func = _cec17.sr_func

def sgn(val):
    return _cec17.sgn(val)
sgn = _cec17.sgn

def round(val):
    return _cec17.round(val)
round = _cec17.round
# This file is compatible with both classic and new-style classes.


